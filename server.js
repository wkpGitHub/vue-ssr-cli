const fs = require('fs');
const path = require('path');
const LRU = require('lru-cache');
const express = require('express');
const favicon = require('serve-favicon');
const compression = require('compression'); // compression middleware: support deflate/gzip
const resolve = file => path.resolve(__dirname, file);

const { createBundleRenderer } = require('vue-server-renderer');

const isProd = process.env.NODE_ENV === 'production';
// const useMicroCache = process.env.MICRO_CACHE !== 'false';

const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const app = express();

function createRenderer(bundle, options) {
  return createBundleRenderer(bundle, Object.assign(options, {
    cache: new LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    baseDir: resolve('./dist'),
    runInNewContext: false
  }));
}

let renderer;
let readyPromise;
const templatePath = resolve('./src/index.template.html');
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8');
  const bundle = require('./dist/vue-ssr-server-bundle.json');
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json');
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  });
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options);
    }
  );
}

// 静态资源缓存
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: (cache && isProd) ? 1000 * 60 * 60 * 24 * 30 : 0
});

app.use(compression({ threshold: 0 }));
app.use(favicon('./static/logo-48.png'));
app.use('/dist', serve('./dist', true));
app.use('/static', serve('./static', true));
app.use('/manifest.json', serve('./manifest.json', true));
app.use('/service-worker.js', serve('./dist/service-worker.js'));

function render(req, res) {
  const s = Date.now();
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found');
    } else {
      // Render Error page and redirect
      res.status(500).send('500 | Internet Server Error');
      console.error(`error during render: ${req.url}`);
      console.error(err.stack);
    }
  };

  const context = {
    title: 'BNB-SSR-手机搜狐网',
    url: req.url,
    cookies: req.headers.cookie
  };

  global.__VUE_SSR_CONTEXT__ = context;

  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }
    res.end(html);
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s }ms`);
    }
  });
}

// server
app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res));
});

const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`server started at localhost: ${port}`);
});

